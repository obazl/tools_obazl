load("//config/cc:CONFIG.bzl",
     COPTS   = "BASE_COPTS",
     DEFINES = "BASE_DEFINES")

load("@makeheaders//src:RULES.bzl", "makeheaders")

TOOLCHAINS = ["//:repo_paths"]

alias(
    name = "ws",
    actual = ":workspace"
)

##########
cc_binary(
    name  = "coswitch",
    visibility = ["//visibility:public"],
    srcs  = [
        "coswitch.c",
        ":mkhdrs",
        # "//src/hdrs:coswitch.h",
    ],
    deps = [
        # "//src/coswitch",
        "@findlibc//src:findlibc",
        "@opamc//src:opamc",
        "@xdgc//src:xdgc",
        "@gopt//src:gopt",
        "@libs7//src:s7",
        "@liblogc//src:logc",
        "@semverc//src:semverc",
        "@uthash//src:uthash",
        "//new/bazel"
   ],
    copts = COPTS + [
        "-I$(GENDIR)/$(@findlibc)/src",
        "-I$(GENDIR)/$(@opamc)/src",
        "-I$(GENDIR)/$(@xdgc)/src",
        "-I$(@libs7)/src",
        "-I$(GENDIR)/$(@libs7)/src",
        "-I$(@semverc)/src",
        "-I$(@)/src",
        "-I$(GENDIR)/$(@)/new",
        # "-Isrc",
        # "-Icoswitch",
        # "-Iexternal/mibl/coswitch",
        # "-I$(GENDIR)/external/mibl/coswitch",

        # "-I$(GENDIR)/$(@)/src/hdrs",

        # "-I$(GENDIR)/external/mibl~{}/src/hdrs".format(
        #     MIBL_VERSION),

        "-I$(GENDIR)/$(@)/src",
        "-I$(GENDIR)/$(@)/src/opam",
        "-I$(GENDIR)/$(@)/test/opam",

        # "-Iexternal/mibl/src",
        # "-I$(GENDIR)/external/mibl/src",

        "-I$(@libs7)/src",
        # "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),

        "-I$(@gopt)/src",
        # "-Iexternal/gopt~{}".format(GOPT_VERSION),

        "-I$(@liblogc)/src",
        # "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),

        "-I$(@uthash)/src",
        # "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
    ],
    local_defines = DEFINES + select({
        "//compilation_mode:dbg?": ["TRACING", "DEBUG_MIBL"],
        "//conditions:default":   []
    }),
    linkstatic = 1,
    toolchains = TOOLCHAINS,
)

##########
cc_binary(
    name  = "module",
    linkstatic = True,
    srcs  = [
        "module.c", "module.h",
        "xdg.c", "xdg.h",
        "utarray.h", "utstring.h", "uthash.h"
    ],
    deps = [
        ":helper",
        "@runfiles//src:runfiles",
        # "@uthash//:include"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11",
                             "-D_POSIX_C_SOURCE=200809L", ## strndup etc.
                             "-D_DEFAULT_SOURCE"], ## DT_* from dirent.h
        "//conditions:default": ["-std=c11"],
    }) + [
        "-x", "c",
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-I.",
        "-Iobazl/new",
        "-I$(GENDIR)/new",
        "-I$(GENDIR)/external/obazl/new",

        "-I$(GENDIR)",

        "-I$(@runfiles)/src",
        # "-I$(GENDIR)/runfiles",
        # "-I$(GENDIR)/external/runfiles~{}/src".format(
        #     RUNFILES_VERSION),

        # "-I$(GENDIR)/external/mibl/new",
        # "-I$(GENDIR)/external/mibl/src",

        # "-Iexternal/uthash/include",
        # "-Iexternal/libinih",
        # "-Iexternal/logc/src",

        # "-Iexternal/libs7/src",

        # "-Iexternal/uthash",
        # "-Iexternal/uthash/include",
    ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        "-lm",
        # "-lc_s7"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
    ],
    data  = [
        "//new/templates:all",
        "//new/templates/xdg/bin:all",
        "//new/templates/xdg/data/queries:all",
        # "//new/templates/bzl/host:BUILD.bazel",
        # "//new/templates/bzl/profile:BUILD.bazel",
        "//man/man1:new_workspace.1",
    ],
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

##########
cc_binary(
    name  = "workspace",
    linkstatic = True,
    srcs  = [
        "workspace.c", "workspace.h",
        "xdg.c", "xdg.h",
        "utarray.h", "utstring.h", "uthash.h"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11",
                             "-D_POSIX_C_SOURCE=200809L", ## strndup etc.
                             "-D_DEFAULT_SOURCE"], ## DT_* from dirent.h
        "//conditions:default": ["-std=c11"],
    }) + [
        "-x", "c",
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-I.",
        "-Iobazl/new",
        "-I$(GENDIR)/new",
        "-I$(GENDIR)/external/obazl/new",

        "-I$(GENDIR)",

        "-I$(@runfiles)/src",
        # "-I$(GENDIR)/external/runfiles~{}/src".format(
        #     RUNFILES_VERSION),
        # "-I$(GENDIR)/runfiles",
        # "-I$(GENDIR)/external/obazl/runfiles",

        # "-I$(GENDIR)/external/mibl/new",
        # "-I$(GENDIR)/external/mibl/src",

        # "-Iexternal/uthash/include",
        # "-Iexternal/libinih",
        # "-Iexternal/logc/src",

        # "-Iexternal/libs7/src",

        # "-Iexternal/uthash",
        # "-Iexternal/uthash/include",
    ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        "-lm",
        # "-lc_s7"
    ],
    data  = [
        "//new/templates:all",
        "//new/templates/xdg/bin:all",
        "//new/templates/xdg/data/queries:all",
        # "//new/templates/bzl/host:BUILD.bazel",
        # "//new/templates/bzl/profile:BUILD.bazel",
        "//man/man1:new_workspace.1",
    ],
    deps = [
        ":helper",
        "@runfiles//src:runfiles",
        # "@uthash//:include"
    ],
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

##########
alias(
    name = "pkg",
    actual = ":package"
)

cc_binary(
    name  = "package",
    linkstatic = True,
    srcs  = [
        "package.c", "package.h",
        # "log.c", "log.h",  ## provided by libmibl.a
        # "@uthash//:include",
        "utarray.h", "utstring.h", "uthash.h"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
        "WITH_C_LOADER"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11",
                             "-D_POSIX_C_SOURCE=200809L", ## strndup etc.
                             "-D_DEFAULT_SOURCE"], ## DT_* from dirent.h
        "//conditions:default": ["-std=c11"],
    }) + [
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-Inew",
        "-Iexternal/obazl/new",
        "-I$(GENDIR)/new",
        "-I$(GENDIR)/external/obazl/new",

        "-I$(GENDIR)/external/mibl/src",

        "-Iexternal/uthash/include",
        "-Iexternal/libinih",
        "-Iexternal/logc/src",

        # "-Iexternal/mibl/src",
        "-I$(GENDIR)/external/mibl/src", # mibl.h is generated
        "-Iexternal/libs7/src",
        "-Iexternal/libs7/vendored/linenoise",
        "-Iexternal/mibl/libs7/vendored/linenoise",
    ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        "-lm",
    ],
    data = [
        "//scm:srcs",
        "//scm/starlark:srcs",
        "//new/templates:all",
        # "//new/templates/bzl/host:BUILD.bazel",
        # "//new/templates/bzl/profile:BUILD.bazel",
        "//man/man1:new_workspace.1",
    ],
    deps = [
        ":helper",
        "//vendored/logc",
        "@mibl//src:mibl",
        "@mibl//external/libinih:inih",
    ],
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

##########
cc_library(
    name  = "helper",
    linkstatic = True,
    srcs  = [
        "help.c",
        "log.c", "log.h",
        "utils.c"
    ],
    hdrs = [
        "help.h",
        "log.h",
        "utils.h",
        "utstring.h"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
        "WITH_C_LOADER"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11",
                             "-D_POSIX_C_SOURCE=200809L", ## strndup etc.
                             "-D_DEFAULT_SOURCE"], ## DT_* from dirent.h
        "//conditions:default": ["-std=c11"],
    }) + [
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-Inew",
        "-I$(GENDIR)/new",
        "-I$(GENDIR)/external/obazl/new",
        # "-I$(GENDIR)/src",

        # "-I$(GENDIR)/external/mibl/new",
        # "-I$(GENDIR)/external/mibl/src",

        # "-Iexternal/uthash/include",
        # "-Iexternal/libinih",

        "-Iexternal/logc/src",

        # "-Iexternal/libs7/src",
    ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        "-lm",
        # "-lc_s7"
    ],
    data  = [
        "//new/templates:all",
        "//man/man1:new_workspace.1",
    ],
    deps = [
        # "@mibl//src:mibl",
        # "@mibl//external/libinih:inih",
        # "@logc//:logc",
        # "//external/libinih:inih",
        # "@libs7//src:s7",
        # "@libs7//src:c_s7",
        # "@libs7//vendored/linenoise",
    ],
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

########
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "coswitch.c",
        "module.c",
        "package.c",
        "workspace.c",
        "help.c",
        # "xdg.c",
        # "test.c",
    ],
    additional_srcs = [
        "//new/bazel:emit_build_bazel.c",
        "//src/utils:utils.c",
        "ansi_colors.h",
    ],
    # outs = [
    #     "module.h",
    #     "package.h",
    #     "workspace.h",
    #     "utils.h",
    #     "help.h",
    #     "xdg.h",
    #     # "test.h"
    # ],
    # cmd = "\n".join([
    #     "$(execpath //vendored/makeheaders) $(SRCS);",
    #     "cp `dirname $(location help.c)`/*.h $(RULEDIR)",
    # ]),
    # tools = ["//vendored/makeheaders"],
    # visibility = ["//visibility:public"]
)

################################################################
cc_test(
    name  = "test",
    srcs  = [
        "test.c", "test.h",
        "log.c", "log.h",
        "utstring.h"
    ],
    defines = select({
        "//bzl/host:debug": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }) + select({
        "//bzl/host:linux": ["_XOPEN_SOURCE=500"], # strdup
        "//conditions:default":   []
    }) + [
        "WITH_C_LOADER"
    ],
    copts = select({
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11",
                             "-D_POSIX_C_SOURCE=200809L", ## strndup etc.
                             "-D_DEFAULT_SOURCE"], ## DT_* from dirent.h

        "//conditions:default": ["-std=c11"],
    }) + [
        "-Wall",
        "-Wpedantic",
        "-Wno-unused-function",

        "-I$(GENDIR)/new",
        "-I$(GENDIR)/external/obazl/new",

        # "-I$(GENDIR)/runfiles",
        # "-I$(GENDIR)/external/obazl/runfiles",

        "-Ivendored/unity",
        "-Iexternal/obazl/vendored/unity",
   ],
    linkopts = select({
        "//bzl/host:macos": [],
        "//bzl/host:linux": [ "-Wl,-E", "-ldl"],
        "//conditions:default": {}
    }) + [
        # "-l",
    ],
    data  = [
        "//new/templates:all",
        "//new/templates/xdg/data/queries:all",
    ],
    deps = [
        "//vendored/unity",
    ],
    toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

################
# makeheaders(
#     name = "mkhdrs",
#     srcs = ["coswitch.c"]
#     # additional_srcs = [
#     # ] + select({
#     #     "//config/profile:dev?": [
#     #     "//src:ansi_colors.h",
#     #     "//src:trace_dev.h",
#     #     ],
#     #     "//conditions:default":   [
#     #         "//src:ansi_colors.h",
#     #         "//src:trace_prod.h",
#     #     ]
#     # }),
#     # visibility = ["//visibility:public"]
# )

