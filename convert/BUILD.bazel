load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name  = "convert",
    linkstatic = 1,
    srcs  = [
        "convert.c",
        "convert.h",
        "//bazel:bazel_config.c",
        "//bazel:bazel_config.h",
        "@uthash//:include"
    ],
    data = [
        "//convert:convert.scm"
    ],
    defines = ["DEBUG", "DEBUG_TRACE"],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//bzl/host:macos": ["-std=c11"],
        "//bzl/host:linux": ["-std=gnu11"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-pedantic-errors",
        "-I$(GENDIR)/convert",
        "-I$(GENDIR)/external/obazl/convert",

        "-I$(GENDIR)/bazel",
        "-I$(GENDIR)/external/obazl/bazel",

        # "-I$(GENDIR)/src",
        # "-I$(GENDIR)/external/sunlark/src",
        # "-Ivendored/linenoise",
        # "-Iexternal/sunlark/vendored/linenoise",

        "-Ivendored/logc",
        "-Iexternal/obazl/vendored/logc",

        # "-Ivendored/s7",
        # "-Iexternal/sunlark/vendored/s7",
        # "-Ivendored/uthash",

        "-I", "external/uthash/include",

        "-I$(GENDIR)/bazel",

        "-Ilibs7/src",
        "-Iexternal/libs7/src",
    ],
    deps = [
        # "//src:sunlark",
        "//vendored/logc",
        "@libs7//src:s7",
        # "//vendored/s7",
        # "//vendored/uthash",
        # "@sealark//bazel",
    ],
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        "convert.c",
        "//bazel:bazel_config.c"
    ],
    outs = [
        "convert.h",
    ],
    cmd = "\n".join([
        "SRC1=$(location convert.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        "    $(location convert.c) \\",
        "    $(location //bazel:bazel_config.c)",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//:makeheaders"],
    visibility = ["//visibility:public"]
)
