(define (emit-local-prologue-lib outp main pkg prologue)
  (if (or *mibl-debug-prologues* *mibl-debug-s7*)
      (format #t "~A: ~A~%" (ublue "emit-prologue") prologue))

  (if (number? prologue)
      (let* ((prologues (assoc-in '(:mibl :prologues) pkg))
             (this-prologue (assoc-val prologue (cdr prologues)))
             (p-modules (assoc-val :modules this-prologue)))
        (format outp "ocaml_library(\n")
        (format outp "    name     = \"libPrologue_~A\",\n" prologue)
        (format outp "    manifest = [\n")
        (format outp "~{        \":~A\"~^,~%~}\n" p-modules)
        (format outp "    ]\n")
        (format outp ")\n")
        (newline outp))
      ;; else
      (let ((len (fold (lambda (m sum)
                         (+ sum 1 (string-length (format #f "~A" m))))
                       0 prologue)))
        (format outp "ocaml_library(\n")
        (format outp "    name     = \"libPrologue_~A\",\n" main)
    (format outp "    manifest = [")
    (if (> len 48)
        (begin
          (newline outp)
          (format outp "~{        \"~A\"~^,~%~}\n" prologue)
          (newline outp))
        (format outp "~{\":~A\"~^, ~}" prologue))
    (format outp "]\n")
        ;; (format outp "    manifest = [\n")
        ;; (format outp "~{        \":~A\"~^,~%~}\n" prologue)
        ;; (format outp "    ]\n")
        (format outp ")\n")
        (newline outp))))

