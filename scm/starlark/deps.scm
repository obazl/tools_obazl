(define (opam-dep->opam-label dep)
  ;;FIXME: lookup module name in opam dune-package
  (let* ((m (cdr dep))
         (pkg (format #f "~A" m)))
    (if (char-upper-case? (pkg 0))
        (vector (car dep) (cdr dep))
        (format #f "@~A//lib/~A" m m))))

(define (local-deps->starlark ml-deps mli-deps)
  (let ((ml-locals (map (lambda (dep)
                          (let ((m (cdr dep)))
                            (case (car dep)
                              ((:here) (format #f ":~A" m))
                              ((:local) (let ((pkg (assoc-val :pkg (cdr dep)))
                                              (tgt (assoc-val :tgt (cdr dep))))
                                          (format #f "//~A:~A" pkg tgt)))
                              ((:builtin) (format #f "@ocaml//~A" m))
                              ((:opam?) (opam-dep->opam-label dep))
                              ((:unresolved) (error 'Unresolved-local-ml-dep "Unresolved local ml dep"))
                              (else (error 'Unexpected-local-dep "Unexpected local ml dep")))))
                        ml-deps))
        (mli-locals (map (lambda (dep)
                           (let ((m (cdr dep)))
                             (case (car dep)
                               ((:here) (format #f ":~A" m))
                               ((:local) (let ((pkg (assoc-val :pkg (cdr dep)))
                                               (tgt (assoc-val :tgt (cdr dep))))
                                           (format #f "//~A:~A" pkg tgt)))
                               ((:builtin) (format #f "@ocaml//~A" m))
                               ((:opam?) (opam-dep->opam-label dep))
                               ((:unresolved) (error 'Unresolved-local-ml-dep "Unresolved local ml dep"))
                               (else (error 'Unexpected-local-dep "Unexpected local mli dep")))))
                         mli-deps)))
    (mibl-trace "ml-locals"  ml-locals)
    (mibl-trace "mli-locals" mli-locals)
    ;; (if (truthy? ml-deps) (error 'x "X"))
    (values ml-locals mli-locals)
    ;; (values (sort! ml-locals string<?) (sort! mli-locals string<?))
    ))

(define (module->starlark-local-deps module pkg)
  (mibl-trace-entry "module->starlark-local-deps" module)
  (let-values (((ml-deps mli-deps) (module->local-deps module pkg)))
    (mibl-trace "ml-deps" ml-deps)
    (mibl-trace "mli-deps" mli-deps)
    (local-deps->starlark ml-deps mli-deps)))

