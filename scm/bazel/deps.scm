(define (opam-dep->opam-label dep)
  ;;FIXME: lookup module name in opam dune-package
  (let* ((m (cdr dep))
         (pkg (format #f "~A" m)))
    (if (char-upper-case? (pkg 0))
        (vector (car dep) (cdr dep))
        (format #f "@~A//lib/~A" m m))))

;; OBSOLETE: deps are already resolved, by bazel-resolve-deps!
(define (local-deps->bazel ml-deps mli-deps)
  (let ((ml-locals (map (lambda (dep)
                          (let ((m (cdr dep)))
                            (case (car dep)
                              ((:here) (format #f ":~A" m))
                              ((:local) (let ((pkg (assoc-val :pkg (cdr dep)))
                                              (tgt (assoc-val :tgt (cdr dep))))
                                          (format #f "//~A:~A" pkg tgt)))
                              ((:builtin) (format #f "@ocaml//~A" m))
                              ((:opam?) (opam-dep->opam-label dep))
                              ((:unresolved) (error 'Unresolved-local-ml-dep "Unresolved local ml dep"))
                              (else (error 'Unexpected-local-dep "Unexpected local ml dep")))))
                        ml-deps))
        (mli-locals (map (lambda (dep)
                           (let ((m (cdr dep)))
                             (case (car dep)
                               ((:here) (format #f ":~A" m))
                               ((:local) (let ((pkg (assoc-val :pkg (cdr dep)))
                                               (tgt (assoc-val :tgt (cdr dep))))
                                           (format #f "//~A:~A" pkg tgt)))
                               ((:builtin) (format #f "@ocaml//~A" m))
                               ((:opam?) (opam-dep->opam-label dep))
                               ((:unresolved) (error 'Unresolved-local-ml-dep "Unresolved local ml dep"))
                               (else (error 'Unexpected-local-dep "Unexpected local mli dep")))))
                         mli-deps)))
    (mibl-trace "ml-locals"  ml-locals)
    (mibl-trace "mli-locals" mli-locals)
    ;; (if (truthy? ml-deps) (error 'x "X"))
    (values ml-locals mli-locals)
    ;; (values (sort! ml-locals string<?) (sort! mli-locals string<?))
    ))

(define -module->local-deps-labels
  (let ((+documentation+ "Lookup module (normalized name) in pkg (:modules, :structures) and return depslist.")
        (+signature+ '(module->local-deps module pkg)))
    (lambda (module pkg)
      (mibl-trace-entry "module->local-deps-labels" module)
      (let* ((module-tlbl (module-name->tagged-label module pkg)))
        (mibl-trace "Module-tlbl" module-tlbl)
        (if (alist? (cdr module-tlbl))
            (let* ((ml-deps (if-let ((deps (assoc-val :ml (cdr module-tlbl))))
                                    (if (list? deps)
                                        (cdr deps)
                                        '())
                                    (if-let ((deps (assoc-val :ml_ (cdr module-tlbl))))
                                            (cdr deps)
                                            '())))
                   (mibl-trace-let "Ml-deps" ml-deps)
                   (mli-deps (if-let ((deps (assoc-val :mli (cdr module-tlbl))))
                                     (if (list? deps)
                                         (cdr deps)
                                         '())
                                     (if-let ((deps (assoc-val :mli_ (cdr module-tlbl))))
                                             (cdr deps)
                                             '())))
                   (mibl-trace-let "MLI-deps" mli-deps)
                   )
              (mibl-trace "mli-deps 2" mli-deps)
              (values ml-deps mli-deps))
            (begin
              (mibl-trace "xxxxxxxxxxxxxxxx" "")
              ;; else must be a struct, (Foo foo.ml Dep1 ...)
              (let ((ml-deps (cddr module-tlbl)))
                (values ml-deps '()))))))))

(define (module->bazel-local-deps module pkg)
  (mibl-trace-entry "module->bazel-local-deps" module)
  (let-values (((ml-deps mli-deps) (-module->local-deps-labels module pkg)))
    (mibl-trace "ml-deps" ml-deps)
    (mibl-trace "mli-deps" mli-deps)
    ;;(local-deps->bazel ml-deps mli-deps)
    (values ml-deps mli-deps)
    ))

