(define (opam-dep->label dep)
  (mibl-trace-entry "opam-dep->label" dep)
  (let* ((dstr (format #f "~A" (cdr dep)))
         (segs (string-split dstr ".")))
    (mibl-trace "segs" segs)
    (if (truthy? (cdr segs))
        (format #f "@~A//lib/~{~A~^/~}" (car segs) (cdr segs))
        (format #f "@~A//lib/~A" dstr dstr))))

(define (resolve-file-deps!)
  (mibl-trace-entry "resolve-file-deps!" "")
  (for-each (lambda (ws-kv)
              ;; (format #t "ws key: ~A\n" (car ws-kv))
              (let ((pkgs (car (assoc-val :pkgs (cdr ws-kv)))))
                (for-each (lambda (pkg-kv)
                            (let* ((pkg (cdr pkg-kv))
                                   (pkg-modules (assoc-val :modules pkg))
                                   (pkg-structs (assoc :structures pkg))
                                   (pkg-sigs (assoc :signatures pkg)))

                              (mibl-trace "pkg-modules" pkg-modules)
                              (mibl-trace "pkg-structs" pkg-structs)
                              (mibl-trace "pkg-sigs" pkg-sigs)

                              (if (truthy? pkg-modules)
                                  (for-each (lambda (module)
                                              (mibl-trace "resolving module" module)
                                              (if-let ((ml-static (assoc :ml (cdr module))))
                                                      (if (list? (cdr ml-static))
                                                          (let* ((mibl-trace-let "ml-static" ml-static)
                                                                 (deps (cddr ml-static))
                                                                 (fixed (filter (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (not (eq? :unresolved (car dep))))
                                                                                deps)))
                                                            (if (truthy? fixed)
                                                                (set-cdr! (cdr ml-static) fixed)
                                                                (set-cdr! ml-static (cadr ml-static))))))
                                              (if-let ((ml-dynamic (assoc :ml_ (cdr module))))
                                                      (if (list? (cdr ml-dynamic))
                                                          (let* ((mibl-trace-let "ml-dynamic a" ml-dynamic)
                                                                 (deps (cddr ml-dynamic))
                                                                 (fixed (filter (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (not (eq? :unresolved (car dep))))
                                                                                deps)))
                                                            (set-cdr! (cdr ml-dynamic) fixed))))
                                              (if-let ((mli-static (assoc :mli (cdr module))))
                                                      (if (list? (cdr mli-static))
                                                          (let* ((mibl-trace-let "mli-static" mli-static)
                                                                 (deps (cddr mli-static))
                                                                 (fixed (filter (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (not (eq? :unresolved (car dep))))
                                                                                deps)))
                                                            (set-cdr! (cdr mli-static) fixed))))
                                              (if-let ((mli-dynamic (assoc :mli_ (cdr module))))
                                                      (if (list? (cdr mli-dynamic))
                                                          (let* ((mibl-trace-let "mli-dynamic" mli-dynamic)
                                                                 (deps (cddr mli-dynamic))
                                                                 (fixed (filter (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (not (eq? :unresolved (car dep))))
                                                                                deps)))
                                                            (set-cdr! (cdr mli-dynamic) fixed)))))
                                            pkg-modules))

                              (if (truthy? pkg-structs)
                                  (let* ((statics (if-let ((statics (assoc-in '(:structures :static) pkg)))
                                                          statics '()))
                                         (dynamics (if-let ((dynamics (assoc-in '(:structures :dynamic) pkg)))
                                                           dynamics '())))
                                    (mibl-trace "static structs" statics)
                                    (mibl-trace "dynamic structs" dynamics)
                                    (if (truthy? statics)
                                        (for-each (lambda (struct)
                                                    (mibl-trace "resolving statstruct" struct)
                                                    (if (list? (cdr struct))
                                                        (let* ((deps (cddr struct))
                                                               (fixed (filter (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (not (eq? :unresolved (car dep))))
                                                                              deps)))
                                                          (set-cdr! (cdr struct) fixed))))
                                                  (cdr statics)))
                                    (if (truthy? dynamics)
                                        (for-each (lambda (struct)
                                                    (mibl-trace "resolving dynstruct" struct)
                                                    (if (list? (cdr struct))
                                                        (let* ((deps (cddr struct))
                                                               (fixed (filter (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (not (eq? :unresolved (car dep))))
                                                                              deps)))
                                                          (set-cdr! (cdr struct) fixed))))
                                                  (cdr dynamics)))))

                              (if pkg-sigs
                                  (let* ((statics (if-let ((statics (assoc-in '(:signatures :static) pkg)))
                                                          statics '()))
                                         (dynamics (if-let ((dynamics (assoc-in '(:signatures :dynamic) pkg)))
                                                           dynamics '())))
                                    (mibl-trace "static sigs" statics)
                                    (mibl-trace "dynamic sigs" dynamics)
                                    (if (truthy? statics)
                                        (for-each (lambda (sig)
                                                    (mibl-trace "resolving statsig" sig)
                                                    (if (list? (cdr sig))
                                                        (let* ((deps (cddr sig))
                                                               (fixed (filter (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (not (eq? :unresolved (car dep))))
                                                                              deps)))
                                                          (set-cdr! (cdr sig) fixed))))
                                                  (cdr statics)))
                                    (if (truthy? dynamics)
                                        (for-each (lambda (sig)
                                                    (mibl-trace "resolving dynsig" sig)
                                                    (if (list? (cdr sig))
                                                        (let* ((deps (cddr sig))
                                                               (fixed (filter (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (not (eq? :unresolved (car dep))))
                                                                              deps)))
                                                          (set-cdr! (cdr sig) fixed))))
                                                  (cdr dynamics)))))
                              ))
                          pkgs)))
            *mibl-project*))

(define (bazel-resolve-labels!)
  (mibl-trace-entry "bazel-resolve-labels!" "")
  (for-each (lambda (ws-kv)
              ;; (format #t "ws key: ~A\n" (car ws-kv))
              (let ((pkgs (car (assoc-val :pkgs (cdr ws-kv)))))
                (for-each (lambda (pkg-kv)

                            ;; pkg files
                            (mibl-trace "resolving pkg file labels" (car pkg-kv))
                            (let* ((pkg (cdr pkg-kv))
                                   (pkg-modules (assoc-val :modules pkg))
                                   (pkg-structs (assoc :structures pkg))
                                   (pkg-sigs (assoc :signatures pkg)))
                              (mibl-trace "pkg-modules" pkg-modules)
                              (mibl-trace "pkg-structs" pkg-structs)
                              (mibl-trace "pkg-sigs" pkg-sigs)
                              (if (truthy? pkg-modules)
                                  (for-each (lambda (module)
                                              (mibl-trace "resolving module" module)
                                              (if-let ((ml-static (assoc :ml (cdr module))))
                                                      (if (list? (cdr ml-static))
                                                          (let* ((mibl-trace-let "ml-static" ml-static)
                                                                 (deps (cddr ml-static))
                                                                 (resolved (map (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (case (car dep)
                                                                                    ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                    ((:here) (format #f ":~A" (cdr dep)))
                                                                                    ((:local) (format #f "//~A:~A"
                                                                                                      (assoc-val :pkg (cdr dep))
                                                                                                      (assoc-val :tgt (cdr dep))))
                                                                                    ((:opam?) (opam-dep->label dep))
                                                                                    (else dep)))
                                                                                deps)))
                                                            (mibl-trace "resolved" resolved)
                                                            (set-cdr! (cdr ml-static) resolved))))
                                              ;; (set-cdr! ml-static (cadr ml-static))))))
                                              (if-let ((ml-dynamic (assoc :ml_ (cdr module))))
                                                      (if (list? (cdr ml-dynamic))
                                                          (let* ((mibl-trace-let "ml-dynamic a" ml-dynamic)
                                                                 (deps (cddr ml-dynamic))
                                                                 (resolved (map (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (case (car dep)
                                                                                    ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                    ((:here) (format #f ":~A" (cdr dep)))
                                                                                    ((:local) (format #f "//~A:~A"
                                                                                                      (assoc-val :pkg (cdr dep))
                                                                                                      (assoc-val :tgt (cdr dep))))
                                                                                    ((:opam?) (opam-dep->label dep))
                                                                                    (else dep)))
                                                                                deps)))
                                                            (mibl-trace "resolved" resolved)
                                                            (set-cdr! (cdr ml-dynamic) resolved))))
                                              (if-let ((mli-static (assoc :mli (cdr module))))
                                                      (if (list? (cdr mli-static))
                                                          (let* ((mibl-trace-let "mli-static" mli-static)
                                                                 (deps (cddr mli-static))
                                                                 (resolved (map (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (case (car dep)
                                                                                    ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                    ((:here) (format #f ":~A" (cdr dep)))
                                                                                    ((:local) (format #f "//~A:~A"
                                                                                                      (assoc-val :pkg (cdr dep))
                                                                                                      (assoc-val :tgt (cdr dep))))
                                                                                    (else dep)))
                                                                                deps)))
                                                            (mibl-trace "resolved" resolved)
                                                            (set-cdr! (cdr mli-static) resolved))))
                                              ;;      (fixed (filter (lambda (dep)
                                              ;;                       (mibl-trace "dep" dep)
                                              ;;                       (not (eq? :unresolved (car dep))))
                                              ;;                     deps)))
                                              ;; (set-cdr! (cdr mli-static) fixed))))
                                              (if-let ((mli-dynamic (assoc :mli_ (cdr module))))
                                                      (if (list? (cdr mli-dynamic))
                                                          (let* ((mibl-trace-let "mli-dynamic" mli-dynamic)
                                                                 (deps (cddr mli-dynamic))
                                                                 (resolved (map (lambda (dep)
                                                                                  (mibl-trace "dep" dep)
                                                                                  (case (car dep)
                                                                                    ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                    ((:here) (format #f ":~A" (cdr dep)))
                                                                                    ((:local) (format #f "//~A:~A"
                                                                                                      (assoc-val :pkg (cdr dep))
                                                                                                      (assoc-val :tgt (cdr dep))))
                                                                                    ((:opam?) (opam-dep->label dep))
                                                                                    (else dep)))
                                                                                deps)))
                                                            (mibl-trace "resolved" resolved)
                                                            (set-cdr! (cdr mli-dynamic) resolved)))))
                                            pkg-modules))

                              (if (truthy? pkg-structs)
                                  (let* ((statics (if-let ((statics (assoc-in '(:structures :static) pkg)))
                                                          statics '()))
                                         (dynamics (if-let ((dynamics (assoc-in '(:structures :dynamic) pkg)))
                                                           dynamics '())))
                                    (mibl-trace "static structs" statics)
                                    (mibl-trace "dynamic structs" dynamics)
                                    (if (truthy? statics)
                                        (for-each (lambda (struct)
                                                    (mibl-trace "resolving statstruct" struct)
                                                    (if (list? (cdr struct))
                                                        (let* ((deps (cddr struct))
                                                               (resolved (map (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (case (car dep)
                                                                                  ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                  ((:here) (format #f ":~A" (cdr dep)))
                                                                                  ((:local) (format #f "//~A:~A"
                                                                                                    (assoc-val :pkg (cdr dep))
                                                                                                    (assoc-val :tgt (cdr dep))))
                                                                                  ((:opam?) (opam-dep->label dep))
                                                                                  (else dep)))
                                                                              deps)))
                                                          (mibl-trace "resolved" resolved)
                                                          (set-cdr! (cdr struct) resolved))))
                                                  (cdr statics)))
                                    (if (truthy? dynamics)
                                        (for-each (lambda (struct)
                                                    (mibl-trace "resolving dynstruct" struct)
                                                    (if (list? (cdr struct))
                                                        (let* ((deps (cddr struct))
                                                               (resolved (map (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (case (car dep)
                                                                                  ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                  ((:here) (format #f ":~A" (cdr dep)))
                                                                                  ((:local) (format #f "//~A:~A"
                                                                                                    (assoc-val :pkg (cdr dep))
                                                                                                    (assoc-val :tgt (cdr dep))))
                                                                                  ((:opam?) (opam-dep->label dep))
                                                                                  (else dep)))
                                                                              deps)))
                                                          (mibl-trace "resolved" resolved)
                                                          (set-cdr! (cdr struct) resolved))))
                                                  ;;      (fixed (filter (lambda (dep)
                                                  ;;                       (mibl-trace "dep" dep)
                                                  ;;                       (not (eq? :unresolved (car dep))))
                                                  ;;                     deps)))
                                                  ;; (set-cdr! (cdr struct) fixed))))
                                                  (cdr dynamics)))))

                              (if pkg-sigs
                                  (let* ((statics (if-let ((statics (assoc-in '(:signatures :static) pkg)))
                                                          statics '()))
                                         (dynamics (if-let ((dynamics (assoc-in '(:signatures :dynamic) pkg)))
                                                           dynamics '())))
                                    (mibl-trace "static sigs" statics)
                                    (mibl-trace "dynamic sigs" dynamics)
                                    (if (truthy? statics)
                                        (for-each (lambda (sig)
                                                    (mibl-trace "resolving statsig" sig)
                                                    (if (list? (cdr sig))
                                                        (let* ((deps (cddr sig))
                                                               (resolved (map (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (case (car dep)
                                                                                  ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                  ((:here) (format #f ":~A" (cdr dep)))
                                                                                  ((:local) (format #f "//~A:~A"
                                                                                                    (assoc-val :pkg (cdr dep))
                                                                                                    (assoc-val :tgt (cdr dep))))
                                                                                  ((:opam?) (opam-dep->label dep))
                                                                                  (else dep)))
                                                                              deps)))
                                                          (mibl-trace "resolved" resolved)
                                                          (set-cdr! (cdr sig) resolved))))
                                                  ;;      (fixed (filter (lambda (dep)
                                                  ;;                       (mibl-trace "dep" dep)
                                                  ;;                       (not (eq? :unresolved (car dep))))
                                                  ;;                     deps)))
                                                  ;; (set-cdr! (cdr sig) fixed))))
                                                  (cdr statics)))
                                    (if (truthy? dynamics)
                                        (for-each (lambda (sig)
                                                    (mibl-trace "resolving dynsig" sig)
                                                    (if (list? (cdr sig))
                                                        (let* ((deps (cddr sig))
                                                               (resolved (map (lambda (dep)
                                                                                (mibl-trace "dep" dep)
                                                                                (case (car dep)
                                                                                  ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                                  ((:here) (format #f ":~A" (cdr dep)))
                                                                                  ((:local) (format #f "//~A:~A"
                                                                                                    (assoc-val :pkg (cdr dep))
                                                                                                    (assoc-val :tgt (cdr dep))))
                                                                                  ((:opam?) (opam-dep->label dep))
                                                                                  (else dep)))
                                                                              deps)))
                                                          (mibl-trace "resolved" resolved)
                                                          (set-cdr! (cdr sig) resolved))))
                                                  ;;      (fixed (filter (lambda (dep)
                                                  ;;                       (mibl-trace "dep" dep)
                                                  ;;                       (not (eq? :unresolved (car dep))))
                                                  ;;                     deps)))
                                                  ;; (set-cdr! (cdr sig) fixed))))
                                                  (cdr dynamics))))))

                            ;; aggregates
                            (mibl-trace "resolving aggregate labels" (car pkg-kv))
                            (let* ((pkg (cdr pkg-kv))
                                   (pkg-ns-lib-deps     (assoc-in '(:mibl :ns-library :deps :resolved) pkg))
                                   (pkg-ns-archive-deps (assoc-in '(:mibl :ns-archive :deps :resolved) pkg))
                                   (pkg-lib-deps        (assoc-in '(:mibl :library :deps :resolved) pkg))
                                   (pkg-archive-deps    (assoc-in '(:mibl :archive :deps :resolved) pkg)))
                              (mibl-trace "pkg-ns-lib-deps" pkg-ns-lib-deps)
                              (mibl-trace "pkg-ns-archive-deps" pkg-ns-archive-deps)
                              (mibl-trace "pkg-lib-deps" pkg-lib-deps)
                              (mibl-trace "pkg-archive-deps" pkg-archive-deps)
                              (for-each (lambda (lst)
                                          (mibl-trace "lst" lst)
                                          (if (truthy? lst)
                                              (if (not (number? (cdr lst)))
                                                  (let ((resolved (map (lambda (dep)
                                                                         (mibl-trace "dep" dep)
                                                                         (case (car dep)
                                                                           ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                           ((:here) (format #f ":~A" (cdr dep)))
                                                                           ((:local) (format #f "//~A:~A"
                                                                                             (assoc-val :pkg (cdr dep))
                                                                                             (assoc-val :tgt (cdr dep))))
                                                                           ((:opam?) (opam-dep->label dep))
                                                                           (else dep)))
                                                                       (cdr lst))))
                                                    (mibl-trace "resolved" resolved)
                                                    (set-cdr! lst resolved)))))
                                        (list pkg-ns-lib-deps pkg-ns-archive-deps
                                              pkg-lib-deps pkg-archive-deps)))
                            ;; ppx-codeps
                            (mibl-trace "resolving ppx-codeps labels" (car pkg-kv))
                            (let* ((pkg (cdr pkg-kv))
                                   (pkg-ns-lib-codeps     (assoc*-in '(:mibl :ns-library :ppx-codeps) pkg))
                                   (pkg-ns-archive-codeps (assoc*-in '(:mibl :ns-archive :ppx-codeps) pkg))
                                   (pkg-lib-codeps        (assoc*-in '(:mibl :library :ppx-codeps) pkg))
                                   (pkg-archive-codeps    (assoc*-in '(:mibl :archive :ppx-codeps) pkg)))
                              (mibl-trace "pkg-ns-lib-codeps" pkg-ns-lib-codeps)
                              (mibl-trace "pkg-ns-archive-codeps" pkg-ns-archive-codeps)
                              (mibl-trace "pkg-lib-codeps" pkg-lib-codeps)
                              (mibl-trace "pkg-archive-codeps" pkg-archive-codeps)
                              (for-each (lambda (codep)
                                          (mibl-trace "codep" codep)
                                          (if (truthy? codep)
                                              (if (not (number? (cdr codep)))
                                                  (let ((resolved (map (lambda (dep)
                                                                         (mibl-trace "dep" dep)
                                                                         (case (car dep)
                                                                           ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                           ((:here) (format #f ":~A" (cdr dep)))
                                                                           ((:local) (format #f "//~A:~A"
                                                                                             (assoc-val :pkg (cdr dep))
                                                                                             (assoc-val :tgt (cdr dep))))
                                                                           ((:opam?) (opam-dep->label dep))
                                                                           (else dep)))
                                                                       (cdr codep))))
                                                    (mibl-trace "resolved" resolved)
                                                    (set-cdr! codep resolved)))))
                                        (remove '()
                                                (list pkg-ns-lib-codeps pkg-ns-archive-codeps
                                                      pkg-lib-codeps pkg-archive-codeps)))
                              )
                            ;; shared deps
                            (mibl-trace "resolving shared deps labels" (car pkg-kv))
                            (let* ((pkg (cdr pkg-kv)))
                              (if-let ((shared-deps (assoc-in '(:mibl :shared-deps) pkg)))
                                      ;; e.g. (:shared-deps ((1 (:opam? . ppxlib) (:opam? . ppx_sexp_conv.expander)
                                      (begin
                                        (mibl-trace "bazel resolving shared deps" shared-deps)
                                        (for-each (lambda (deplist)
                                                    (mibl-trace "deplist" deplist)
                                                    ;; e.g.  (1 (:opam? . ppx_compare.runtime-lib))
                                                    (let ((deps (cdr deplist)))
                                                      (let ((resolved (map (lambda (dep)
                                                                             (mibl-trace "dep" dep)
                                                                             (case (car dep)
                                                                               ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                               ((:here) (format #f ":~A" (cdr dep)))
                                                                               ;; "(:local (:pkg . src) (:tgt . sexplib))"
                                                                               ((:local) (format #f "//~A:~A"
                                                                                                 (assoc-val :pkg (cdr dep))
                                                                                                 (assoc-val :tgt (cdr dep))))
                                                                               ((:opam?) (opam-dep->label dep))
                                                                               (else dep)))
                                                                           deps)))
                                                        (mibl-trace "resolved" resolved)
                                                        (set-cdr! deplist resolved)
                                                        (mibl-trace "updated" deplist))))
                                                  (cadr shared-deps)))))

                            (mibl-trace "resolving shared ppx labels" (car pkg-kv))
                            (let* ((pkg (cdr pkg-kv)))
                              (if-let ((shared-ppx (assoc-in '(:mibl :shared-ppx) pkg)))
                                      (begin
                                        (mibl-trace "bazel resolving shared ppx deps" shared-ppx)
                                        (for-each (lambda (ppx)
                                                    (mibl-trace "ppx" ppx)
                                                    (let ((deps (assoc :manifest (cdr ppx))))
                                                      (let ((resolved (map (lambda (dep)
                                                                             (mibl-trace "dep" dep)
                                                                             (case (car dep)
                                                                               ((:builtin) (format #f "@ocaml//~A" (cdr dep)))
                                                                               ((:here) (format #f ":~A" (cdr dep)))
                                                                               ;; "(:local (:pkg . src) (:tgt . sexplib))"
                                                                               ((:local) (format #f "//~A:~A"
                                                                                                 (assoc-val :pkg (cdr dep))
                                                                                                 (assoc-val :tgt (cdr dep))))
                                                                               ((:opam?) (opam-dep->label dep))
                                                                               (else dep)))
                                                                           (cdr deps))))
                                                        (mibl-trace "resolved" resolved)
                                                        (set-cdr! deps resolved))))
                                                  (cadr shared-ppx)))))
                            )
                          pkgs)))
            *mibl-project*))

