load("@rules_cc//cc:defs.bzl",
     "cc_binary",
     "cc_library")
load("@rules_foreign_cc//foreign_cc:defs.bzl",
     "configure_make",
     "make")

## DEBUG BUILD:
## $ bazel build coq:obazl --spawn_strategy=local -c dbg --strip="never"

##########
cc_binary(
    name  = "obazl",
    srcs  = [
        "codept.c",
        "codept.h",
        "config.c",
        "config.h",
        "repos.c",
        "repos.h",
        "fsutils.c",
        "fsutils.h",
        "obazl.c",
        "obazl.h",
        "dune_parser.c",
        "dune_parser.h",
        "strings.c",
        "strings.h",
        "enums.h",
        "@uthash//:include",
    ],
    copts = [
        "-I", "$(GENDIR)/tool/obazl",
        "-I", "external/libinih",
        "-I", "external/uthash/include",
    ] + select({
        "//bzl/host:linux_fastbuild": [
            "-g", "-O0",  ## -Og
        ],
        "//bzl/host:linux_opt": ["-O3"],
        "//bzl/host:linux_debug": [
            "-g", "-Og",
            "--coverage",
        ],

        "//bzl/host:macos_fastbuild": [
            "-g", "-Og",
        ],
        "//bzl/host:macos_opt": [
            "-O3",
            "-Wl,--strip-all",
        ],
        "//bzl/host:macos_debug": [
            "-g", "-O0",
            "--coverage",
            "-fprofile-instr-generate",  ## clang
            "-fcoverage-mapping", ## clang
            "-DDEBUG",
        ],
    }),
    linkopts = select({
        "//bzl/host:linux_debug": [],
        "//bzl/host:macos_debug": [
            "-fprofile-instr-generate",  ## clang
        ],
        "//conditions:default": []
    }),
    deps = [
        ":sfsexp",              # for parsing dune files
        "//external/libinih:inih",                # for ini file
        # "//shared:uthash",
        # "//shared:utils",
    ],
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        "codept.c",
        "config.c",
        "fsutils.c",
        "repos.c",
        "obazl.c",
        "dune_parser.c",
        "enums.h",
        "strings.c",
        # "//shared:utils.c"
    ],
    outs = [
        "config.h",
        "codept.h",
        "fsutils.h",
        "repos.h",
        "obazl.h",
        "dune_parser.h",
        "strings.h",
        # "utils.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location codept.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        "    $(location codept.c) \\",
        "    $(location config.c) \\",
        "    $(location fsutils.c) \\",
        "    $(location repos.c) \\",
        "    $(location obazl.c) \\",
        "    $(location dune_parser.c) \\",
        "    $(location strings.c)",
        # "    $(location //shared:utils.c);",
        "cp $${SRCDIR1}/*.h $(@D)",

        # "cp tool/obazl/*.h $(@D)",
        # "cp shared/utils.h $(@D)"
    ]),
    tools = ["@makeheaders//:makeheaders"]
)

##########
# cc_binary(
#     name  = "coqlib",
#     srcs  = ["coqlib.c",
#              "uthash.h"],
#     copts = [
#         # "-g", "-Og"
#         "-O3"
#     ],
#     data  = ["//data:test.META"],
#     # copts = ["-g", "-Itools/parser/demo"]
# )

################################################################

##########
cc_binary(
    name  = "makeheaders",
    srcs  = [
        "makeheaders.c",
    ],
    copts = [
        # "-g", "-Og",
        "-O3"
    ],
)

################################################################
configure_make(
    name = "sfsexp",
    configure_in_place = True,
    autoreconf = True,
    autoreconf_options = ["--install"],
    lib_source = "@sfsexp//:all",
    out_static_libs = ["libsexp.a"],
)
