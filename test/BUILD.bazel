## library for parsing ocamlfind META files

load("@rules_cc//cc:defs.bzl", "cc_test")

# load("@rules_foreign_cc//foreign_cc:defs.bzl",
#      "configure_make",
#      "make")

##########
cc_binary(
    name  = "test",
    srcs  = [
        "test.c",
        "test.h",
        "@uthash//:include",
    ],
    data = [
        # "//src/lua:dune.lua"
    ],
    copts = [
        "-std=c11",
        "-pedantic-errors",

        "-I", "$(GENDIR)/test",

        "-I", "$(GENDIR)/src",

        # "-I", "$(GENDIR)/external/obazl/src/lib/metadune",
        # "-I", "$(GENDIR)/external/tools_obazl/src/lib/metadune",

        "-I", "$(GENDIR)/src/include/obazl",
        "-I", "$(GENDIR)/external/obazl/src/include/obazl",
        "-I", "$(GENDIR)/external/tools_obazl/src/include/obazl",

        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",

        "-I", "external/uthash/include",
    ],
    deps = [
        "//src:metadune",
        "//vendored/logc"
    ],
    linkopts = [
        # "-L/usr/local/lib",     # FIXME
        # "-llua",
    ],
    linkstatic = 1
)

cc_binary(
    name  = "tests7",
    srcs  = [
        "tests7.c",
        "tests7.h",
        "@uthash//:include",
    ],
    data = [
        # "//src/lua:dune.lua"
    ],
    copts = [
        "-std=c11",
        "-pedantic-errors",

        "-I", "$(GENDIR)/test",

        "-I", "$(GENDIR)/src",

        # "-I", "$(GENDIR)/external/obazl/src/lib/metadune",
        # "-I", "$(GENDIR)/external/tools_obazl/src/lib/metadune",

        "-I", "$(GENDIR)/src/include/obazl",
        "-I", "$(GENDIR)/external/obazl/src/include/obazl",
        "-I", "$(GENDIR)/external/tools_obazl/src/include/obazl",

        "-I", "vendored/logc",
        "-I", "external/obazl/vendored/logc",
        "-I", "external/tools_obazl/vendored/logc",

        "-I", "external/uthash/include",

        "-Iexternal/libs7/src"
    ],
    deps = [
        "//src:metadune",
        "//vendored/logc",
        "@libs7//src:s7"
    ],
    linkstatic = 1
)

########
genrule(
    name = "mkhdrs",
    srcs = [
        # "@uthash//:include",
        "test.c",
        "tests7.c"
    ],
    outs = [
        "test.h",
        "tests7.h"
    ],
    cmd = "\n".join([
        "SRC1=$(location test.c)",
        "SRCDIR1=`dirname $$SRC1`",
        "$(location @makeheaders//:makeheaders) \\",
        # "    $(locations @uthash//:include) \\",
        # "    $(location debug.c) \\",
        # "    $(location dune_parser.c) \\",
        "    $(location test.c) \\",
        "    $(location tests7.c)",
        # "    $(location metadune.c) \\",
        # "    $(location obazl_config.c) \\",
        # "    $(location obazl_utils.c) \\",
        # "    $(location dune_constants.c)",
        # "    $(location dune_parser_lua.c) ",
        "cp $${SRCDIR1}/*.h $(@D)",
    ]),
    tools = ["@makeheaders//:makeheaders"]
)

###########
cc_library(
    name = "uthash",
    srcs = [
        "@uthash//:include"
    ],
    includes = [
        "@uthash//:include"
    ],
    linkstatic=1,
    visibility = ["//visibility:public"]
)

